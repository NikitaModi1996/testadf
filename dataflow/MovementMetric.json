{
	"name": "MovementMetric",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Powerq",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Event_Code",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Movement",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "MovementType"
				},
				{
					"name": "select1"
				},
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "duplicate",
					"description": "Delete duplicate rows"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "sort1",
					"description": "Sort the data based on employeeID & date to get better preview of data"
				}
			],
			"scriptLines": [
				"source(output(",
				"          JOB_INFO_ID as string,",
				"          EMPLOYEE_ID as string,",
				"          JOB_TITLE as string,",
				"          JOB_CODE as string,",
				"          EMPLOYEE_TYPE as string,",
				"          DEPARTMENT as string,",
				"          DIVISION as string,",
				"          JOB_LOCATION as string,",
				"          EFFECTIVE_START_DATE as string,",
				"          EFFECTIVE_END_DATE as string,",
				"          COMPANY as string,",
				"          BUSINESS_UNIT as string,",
				"          COST_CENTER as string,",
				"          EMPLOYEE_CLASS as string,",
				"          EMPLOYMENT_TYPE as string,",
				"          FTE as string,",
				"          REGULAR_TEMP as string,",
				"          STANDARD_HOURS as string,",
				"          PAY_SCALE_AREA as string,",
				"          EVENT as string,",
				"          EVENT_REASON_ICODE as string,",
				"          EXTERNAL_CODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          OBJECT_ID as string,",
				"          INTERNAL_CODE as string,",
				"          EFFECTIVE_START_DATE as string,",
				"          EFFECTIVE_END_DATE as string,",
				"          EFFECTIVE_STATUS as string,",
				"          CODE as string,",
				"          OBJECT_NAME as string,",
				"          DESCRIPTION as string,",
				"          EVENT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1, source2 join(EVENT_REASON_ICODE == INTERNAL_CODE,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(EXTERNAL_CODE = case(EXTERNAL_CODE == 'H' || EXTERNAL_CODE == 'R', 'Hire', \r",
				"EXTERNAL_CODE == '8' || EXTERNAL_CODE == '4' || EXTERNAL_CODE == '6', 'Internal Movement', \r",
				"EXTERNAL_CODE == '26', 'Termination', ' ')) ~> MovementType",
				"MapDrifted1 select(mapColumn(",
				"          EMPLOYEE_ID,",
				"          EFFECTIVE_START_DATE = source1@EFFECTIVE_START_DATE,",
				"          EFFECTIVE_END_DATE = source1@EFFECTIVE_END_DATE,",
				"          {Movement Type} = EXTERNAL_CODE,",
				"          {Movement Reason Type} = OBJECT_NAME,",
				"          JOB_TITLE,",
				"          DEPARTMENT,",
				"          POSITION_ID,",
				"          MANAGER_ID",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"MovementType derive(IS_FULLTIME_EMPLOYEE = toBoolean(byName('IS_FULLTIME_EMPLOYEE')),",
				"          MANAGER_ID = toString(byName('MANAGER_ID')),",
				"          POSITION_ID = toDouble(byName('POSITION_ID')),",
				"          POSITION_ENTRY_DATE = toDate(byName('POSITION_ENTRY_DATE')),",
				"          OPTVALUE = toShort(byName('OPTVALUE'))) ~> MapDrifted1",
				"select1 aggregate(groupBy(EMPLOYEE_ID,",
				"          EFFECTIVE_START_DATE,",
				"          EFFECTIVE_END_DATE,",
				"          {Movement Type},",
				"          {Movement Reason Type},",
				"          JOB_TITLE,",
				"          POSITION_ID,",
				"          DEPARTMENT,",
				"          MANAGER_ID),",
				"     count = count()) ~> duplicate",
				"duplicate derive(count = count<1) ~> derivedColumn1",
				"derivedColumn1 sort(asc(EMPLOYEE_ID, false),",
				"     asc(EFFECTIVE_START_DATE, false),",
				"     partitionBy('hash', 1)) ~> sort1",
				"sort1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          JOB_INFO_ID as string,",
				"          EMPLOYEE_ID as string,",
				"          JOB_TITLE as string,",
				"          JOB_CODE as string,",
				"          EMPLOYEE_TYPE as string,",
				"          DEPARTMENT as string,",
				"          DIVISION as string,",
				"          JOB_LOCATION as string,",
				"          EFFECTIVE_START_DATE as string,",
				"          EFFECTIVE_END_DATE as string,",
				"          COMPANY as string,",
				"          BUSINESS_UNIT as string,",
				"          COST_CENTER as string,",
				"          EMPLOYEE_CLASS as string,",
				"          EMPLOYMENT_TYPE as string,",
				"          FTE as string,",
				"          REGULAR_TEMP as string,",
				"          STANDARD_HOURS as string,",
				"          WORK_PERIOD as string,",
				"          IS_FULLTIME_EMPLOYEE as string,",
				"          FLSA_STATUS as string,",
				"          PAY_GRADE as string,",
				"          PAY_GROUP as string,",
				"          PAY_SCALE_AREA as string,",
				"          PAY_SCALE_GROUP as string,",
				"          PAY_SCALE_LEVEL as string,",
				"          PAY_SCALE_TYPE as string,",
				"          IS_SHIFT_EMPLOYEE as string,",
				"          TRANSACTION_SEQUENCE_NUMBER as string,",
				"          EVENT as string,",
				"          EVENT_REASON_ICODE as string,",
				"          EMPLOYMENT_STATUS as string,",
				"          MANAGER_ID as string,",
				"          POSITION_ID as string,",
				"          POSITION_ENTRY_DATE as string,",
				"          JOB_ENTRY_DATE as string,",
				"          OPTIONID as string,",
				"          PICKLISTID as string,",
				"          STATUS as string,",
				"          EXTERNAL_CODE as string,",
				"          OPTVALUE as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}