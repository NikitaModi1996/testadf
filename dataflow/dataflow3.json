{
	"name": "dataflow3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Movement",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SOP_HeadCount",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "MapDrifted1",
					"description": "Creates an explicit mapping for each drifted column"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "HireDate"
				},
				{
					"name": "window1"
				},
				{
					"name": "TerminationDate"
				},
				{
					"name": "SOPHeadCount"
				}
			],
			"scriptLines": [
				"source(output(",
				"          JOB_INFO_ID as string,",
				"          EMPLOYEE_ID as string,",
				"          JOB_TITLE as string,",
				"          JOB_CODE as string,",
				"          EMPLOYEE_TYPE as string,",
				"          DEPARTMENT as string,",
				"          DIVISION as string,",
				"          JOB_LOCATION as string,",
				"          EFFECTIVE_START_DATE as string,",
				"          EFFECTIVE_END_DATE as string,",
				"          COMPANY as string,",
				"          BUSINESS_UNIT as string,",
				"          COST_CENTER as string,",
				"          EMPLOYEE_CLASS as string,",
				"          EMPLOYMENT_TYPE as string,",
				"          FTE as string,",
				"          REGULAR_TEMP as string,",
				"          STANDARD_HOURS as string,",
				"          WORK_PERIOD as string,",
				"          IS_FULLTIME_EMPLOYEE as string,",
				"          FLSA_STATUS as string,",
				"          PAY_GRADE as string,",
				"          PAY_GROUP as string,",
				"          PAY_SCALE_AREA as string,",
				"          PAY_SCALE_GROUP as string,",
				"          PAY_SCALE_LEVEL as string,",
				"          PAY_SCALE_TYPE as string,",
				"          IS_SHIFT_EMPLOYEE as string,",
				"          TRANSACTION_SEQUENCE_NUMBER as string,",
				"          EVENT as string,",
				"          EVENT_REASON_ICODE as string,",
				"          EMPLOYMENT_STATUS as string,",
				"          MANAGER_ID as string,",
				"          POSITION_ID as string,",
				"          POSITION_ENTRY_DATE as string,",
				"          JOB_ENTRY_DATE as string,",
				"          OPTIONID as string,",
				"          PICKLISTID as string,",
				"          STATUS as string,",
				"          EXTERNAL_CODE as string,",
				"          OPTVALUE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 derive({Movement Type} = toString(byName('Movement Type')),",
				"          {Movement Reason Type} = toString(byName('Movement Reason Type'))) ~> MapDrifted1",
				"MapDrifted1 derive({Hire Date} = EFFECTIVE_START_DATE) ~> derivedColumn1",
				"derivedColumn1 derive({Hire Date} = case({Movement Type}==\"Hire\",EFFECTIVE_START_DATE,toString(null()))\r",
				") ~> HireDate",
				"HireDate window(over(EMPLOYEE_ID),",
				"     asc(EMPLOYEE_ID, true),",
				"     {Hire Date} =  last({Hire Date}, true())) ~> window1",
				"window1 derive(TerminationDate = case({Movement Type}==\"Termination\",EFFECTIVE_END_DATE)) ~> TerminationDate",
				"TerminationDate derive({SOP HC} = iif({Hire Date} < EFFECTIVE_START_DATE || ({Movement Type} == 'Termination' && EFFECTIVE_END_DATE>= EFFECTIVE_START_DATE), 1, 0)) ~> SOPHeadCount",
				"SOPHeadCount sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EMPLOYEE_ID as string,",
				"          EFFECTIVE_START_DATE as string,",
				"          EFFECTIVE_END_DATE as string,",
				"          {Movement Type} as string,",
				"          {Movement Reason Type} as string,",
				"          JOB_TITLE as string,",
				"          DEPARTMENT as string,",
				"          POSITION_ID as string,",
				"          MANAGER_ID as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}