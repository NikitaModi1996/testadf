{
	"name": "dataflow2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Powerq",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Event_Code",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "MovementType"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          JOB_INFO_ID as string,",
				"          EMPLOYEE_ID as string,",
				"          JOB_TITLE as string,",
				"          JOB_CODE as string,",
				"          EMPLOYEE_TYPE as string,",
				"          DEPARTMENT as string,",
				"          DIVISION as string,",
				"          JOB_LOCATION as string,",
				"          EFFECTIVE_START_DATE as string,",
				"          EFFECTIVE_END_DATE as string,",
				"          COMPANY as string,",
				"          BUSINESS_UNIT as string,",
				"          COST_CENTER as string,",
				"          EMPLOYEE_CLASS as string,",
				"          EMPLOYMENT_TYPE as string,",
				"          FTE as string,",
				"          REGULAR_TEMP as string,",
				"          STANDARD_HOURS as string,",
				"          PAY_SCALE_AREA as string,",
				"          EVENT as string,",
				"          EVENT_REASON_ICODE as string,",
				"          EXTERNAL_CODE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          OBJECT_ID as string,",
				"          INTERNAL_CODE as string,",
				"          EFFECTIVE_START_DATE as string,",
				"          EFFECTIVE_END_DATE as string,",
				"          EFFECTIVE_STATUS as string,",
				"          CODE as string,",
				"          OBJECT_NAME as string,",
				"          DESCRIPTION as string,",
				"          EVENT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1, source2 join(EVENT_REASON_ICODE == INTERNAL_CODE,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(EXTERNAL_CODE = case(EXTERNAL_CODE == 'H' || EXTERNAL_CODE == 'R', 'Hire', \r",
				"EXTERNAL_CODE == '8' || EXTERNAL_CODE == '4' || EXTERNAL_CODE == '6', 'Internal Movement', \r",
				"EXTERNAL_CODE == '26', 'Termination', ' ')\r",
				") ~> MovementType",
				"MovementType select(mapColumn(",
				"          EMPLOYEE_ID,",
				"          EFFECTIVE_START_DATE = source1@EFFECTIVE_START_DATE,",
				"          EFFECTIVE_END_DATE = source1@EFFECTIVE_END_DATE,",
				"          {Movement Type} = EXTERNAL_CODE,",
				"          {Movement Reason Type} = OBJECT_NAME,",
				"          JOB_TITLE,",
				"          DEPARTMENT,",
				"          DIVISION,",
				"          JOB_LOCATION,",
				"          COMPANY",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1"
			]
		}
	}
}